{
  
    
        "post0": {
            "title": "Title",
            "content": "Motivation . Can we build a personal fitness model based on running tracking data that helps identify strategy gaps, overtraining etc.. and recommend future workouts that are fine tuned for a goal such as faster pace? That explains my high level curiousity. . Can we build a deep learing model, when fed historical tracking data, such as heart rate and other attributes available from wearables, learns relevant features and can be used for recommendations? . Let&#39;s narrow down our problem to explore what&#39;s possible. Can we build a deep learning model/classifier, that, given a time-series of heart-rate data of a run, predicts the category of it? . Fastai . We&#39;ll use fastai library to develop the model. . pyts . pyts is a wonderful python package for timeseries classification. We&#39;ll use this together with Fastai . !pip install pyts # for gpx file parsing. !pip install gpxpy nb_root = &#39;/content/gdrive/MyDrive/Colab Notebooks&#39; . Collecting pyts Downloading https://files.pythonhosted.org/packages/b6/2b/1a62c0d32b40ee85daa8f6a6160828537b3d846c9fe93253b38846c6ec1f/pyts-0.11.0-py3-none-any.whl (2.5MB) |████████████████████████████████| 2.5MB 8.3MB/s Requirement already satisfied: scipy&gt;=1.3.0 in /usr/local/lib/python3.6/dist-packages (from pyts) (1.4.1) Requirement already satisfied: scikit-learn&gt;=0.22.1 in /usr/local/lib/python3.6/dist-packages (from pyts) (0.22.2.post1) Requirement already satisfied: numba&gt;=0.48.0 in /usr/local/lib/python3.6/dist-packages (from pyts) (0.51.2) Requirement already satisfied: joblib&gt;=0.12 in /usr/local/lib/python3.6/dist-packages (from pyts) (1.0.0) Requirement already satisfied: numpy&gt;=1.17.5 in /usr/local/lib/python3.6/dist-packages (from pyts) (1.19.5) Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from numba&gt;=0.48.0-&gt;pyts) (51.3.3) Requirement already satisfied: llvmlite&lt;0.35,&gt;=0.34.0.dev0 in /usr/local/lib/python3.6/dist-packages (from numba&gt;=0.48.0-&gt;pyts) (0.34.0) Installing collected packages: pyts Successfully installed pyts-0.11.0 Collecting gpxpy Downloading https://files.pythonhosted.org/packages/dd/23/a1c04fb3ea8d57d4b46cf2956c99a62dfbe009bbe091babeef90cc3d0ef6/gpxpy-1.4.2.tar.gz (105kB) |████████████████████████████████| 112kB 7.5MB/s Building wheels for collected packages: gpxpy Building wheel for gpxpy (setup.py) ... done Created wheel for gpxpy: filename=gpxpy-1.4.2-cp36-none-any.whl size=42547 sha256=57fc603e18b3c4ec5e93cdb3a533175a757c37f5b19bb974757d448e97a0a0dd Stored in directory: /root/.cache/pip/wheels/d9/df/ed/b52985999b3967fa0ef8de22b3dc8ad3494ce3380d5328dd0f Successfully built gpxpy Installing collected packages: gpxpy Successfully installed gpxpy-1.4.2 . Timeseries and Deep Learning . A neat idea is presented in fastbook and fastai course. classification of time-series data can be done using deeplearning, if the input dataset can be converted to an image. Then, we can use cnn based models. A cool technique exists to represent time-series data as an image called Gramian Angular Field. Pyts documentation is an excellent and concise primer on this technique. Let&#39;s think about it in the context of our data - heart rate information. . Heart rate monitors save heart-rate(an integer value) every few(eg: 5) seconds during the course of a run which gets saved to a file. For our exploration, we&#39;ll use gpx files exported from garmin-connect. More on this later. We can extract heart-rate for a run into a list, ordered chronologically, from start of the run to finish. A typical run may have anywhere between a few hundred data-points to several thousand depending on the length of a run. . Let&#39;s consider a toy example first, consisting of just 4 data-points. . eg_hr = [75, 100, 105, 180] print(&#39;Example heart rate time-series - {}&#39;.format(eg_hr)) . Example heart rate time-series - [75, 100, 105, 180] . Representing this information as GAF and hence an image is a 3 step process . scale_range = (0, 1) min_hr = min(eg_hr) max_hr = max(eg_hr) eg_hr_scaled = [(scale_range[0] + (scale_range[1] - scale_range[0]) * ((e - min_hr)/(max_hr - min_hr))) for e in eg_hr] print(&#39;heart rate scaled to [0,1] range - {}&#39;.format(eg_hr_scaled)) . heart rate scaled to [0,1] range - [0.0, 0.23809523809523808, 0.2857142857142857, 1.0] . Note that after scaling, the smallest heart rate(75) became 0 and the largest(180) became 1 and everything in between is scaled appropriately. The advantage of scaling (0, 1) instead of (-1, 1) is that we can accurately convert the data back. More on why this may matter later. . eg_hr_angles = np.arccos(eg_hr_scaled) print(&#39;inverse cosine values of scaled data - {}&#39;.format(eg_hr_angles)) . inverse cosine values of scaled data - [1.57079633 1.33039211 1.28104463 0. ] . gasf = np.cos(np.add.outer(eg_hr_angles, eg_hr_angles)) # alt step 3: final step to get the gramian-difference-matrix. compute sine of the difference between... gadf = np.sin(np.subtract.outer(eg_hr_angles, eg_hr_angles)) print(&#39;gasf n{} n ngadf n{}&#39;.format(gasf, gadf)) . gasf [[-1.00000000e+00 -9.71241812e-01 -9.58314847e-01 6.12323400e-17] [-9.71241812e-01 -8.86621315e-01 -8.62728238e-01 2.38095238e-01] [-9.58314847e-01 -8.62728238e-01 -8.36734694e-01 2.85714286e-01] [ 6.12323400e-17 2.38095238e-01 2.85714286e-01 1.00000000e+00]] gadf [[ 0. 0.23809524 0.28571429 1. ] [-0.23809524 0. 0.04932746 0.97124181] [-0.28571429 -0.04932746 0. 0.95831485] [-1. -0.97124181 -0.95831485 0. ]] . Let&#39;s only focus on GASF variant moving forward. When we train, we may want to consider the difference matrix as well as it captures ... More on the coolness of GAF technique later. . But first, let&#39;s visualize our toy example . %matplotlib inline . plt.axis(&#39;off&#39;) ax1 = plt.subplot(1, 2, 1) ax1.set_title(&#39;summation&#39;) plt.imshow(gasf, cmap=&#39;Greys&#39;, origin=&#39;upper&#39;) ax2 = plt.subplot(1, 2, 2) ax2.set_title(&#39;difference&#39;) plt.imshow(gadf, cmap=&#39;Greys&#39;, origin=&#39;upper&#39;) . &lt;matplotlib.image.AxesImage at 0x7f1925920d30&gt; . Recap . With this toy example, I want to details the steps involved in transforming our input. We&#39;ll be using pyts to all of this and more magically for us with real data. But we can highlight some observations clearly from the toy example . Monotonic pattern . If you trace the diagonal from top left to bottom right on the summation image, the gray scale goes from white to black, capturing the monotonous pattern in our data where heart-rate increases over time - [75, 100, 105, 180] . Temporal pattern . The temporal distance between two data-points is simply the pixel distance. t0 is the [0,0] index, t1 is [1,1] and so on. But also, the cool thing is that we capture the correlation in heart rate between say t0 and t1 in [0,1]. By the change in color, we can say that the heart rate did not jump. Where as, it&#39;s clear that it jumped between t2 and t3 (105 -&gt; 180). I need to explain this better.. . More observations... later. Let&#39;s visualize a real example. . from fastai.vision.all import * from fastbook import * . import gpxpy # returns an array of heart rate recordings for each point saved in the gpx file. # @TODO: for multivariate case(eg: [hr, elevation, temp]), we can return a np array of vectors. # @TODO: ditch gpx and parse tcx files if that provides more datapoints for multivariate case def get_hr_data(gpx_file_path): gpx = gpxpy.parse(open(gpx_file_path)) hr_data = [] for track in gpx.tracks: for segment in track.segments: for point in segment.points: for extension in point.extensions: # other dimensions(eg: elevation, temp) may be part of the point or extension element. for elem in extension: if elem.tag.endswith(&#39;hr&#39;): hr_data.append(int(elem.text)) return np.array((hr_data,)) . # 2. create gaf(sum and diff) images (also markov ones eventually) # 3. plot the hr and gaf images # 4. save gafs to files # 5. Save PAA and other future work as cells with notes . import matplotlib.pyplot as plt from mpl_toolkits.axes_grid1 import ImageGrid from pyts.image import GramianAngularField def load_gaf(hr_data, method, image_size=1., sample_range=(0,1)): # Transform the time series into Gramian Angular Fields # @TODO: try PAA. What&#39;s the performance hit? Is it worth it for upto few 1000 points and say, a few 1000 samples?. # Is it bijective - can we reverse to orignal input image? - would be useful for model understanding. gasf = GramianAngularField(image_size=image_size, sample_range=sample_range, method=method) return gasf.fit_transform(hr_data) def load_gasf(hr_data, image_size=1., sample_range=(0,1)): return load_gaf(hr_data, method=&#39;summation&#39;, image_size=image_size, sample_range=sample_range) def load_gadf(hr_data, image_size=1., sample_range=(0,1)): return load_gaf(hr_data, method=&#39;difference&#39;, image_size=image_size, sample_range=sample_range) def show_images(sf, df, idx=0): # Show the images for the first time series fig = plt.figure(figsize=(8, 4)) grid = ImageGrid(fig, 111, nrows_ncols=(1, 2), axes_pad=0.15, share_all=True, cbar_location=&quot;right&quot;, cbar_mode=&quot;single&quot;, cbar_size=&quot;7%&quot;, cbar_pad=0.3, ) images = [sf[idx], df[idx]] titles = [&#39;Summation&#39;, &#39;Difference&#39;] for image, title, ax in zip(images, titles, grid): im = ax.imshow(image, cmap=&#39;rainbow&#39;, origin=&#39;lower&#39;) ax.set_title(title, fontdict={&#39;fontsize&#39;: 12}) ax.cax.colorbar(im) ax.cax.toggle_label(True) plt.suptitle(&#39;Gramian Angular Fields&#39;, y=0.98, fontsize=16) plt.show() . dre_gpx = Path(nb_root, &quot;gpxfiles&quot;, &quot;activity_6133589965.gpx&quot;) dre_gpx dre_hr_data = get_hr_data(dre_gpx) dre_hr_mean = np.mean(dre_hr_data[0]) dre_hr_median = np.median(dre_hr_data[0]) plt.plot(dre_hr_data[0]) plt.suptitle(&#39;Heart Rate - {} nMean - {} nMedian - {} nMax - {}&#39;.format(dre_gpx.stem, dre_hr_mean, dre_hr_median, np.max(dre_hr_data[0])), y=0.98, fontsize=16, va=&#39;bottom&#39;) plt.show() . Some observations to highlight . There is a overall trend of increasing heart rate from beginning to the end | There are a few sudden dips and spikes suggesting a interval type workout | Average heart rate indicates this may be categorized as a Zone4(154.9/190 = .81%) | Median heart rate indicates this may be categorized as a Zone4(161/190 = .84) | . Now, let&#39;s visualize the GAF images. . dre_gasf = load_gasf(dre_hr_data) dre_gadf = load_gadf(dre_hr_data) fig = plt.figure(figsize=(8, 4)) grid = ImageGrid(fig, 111, nrows_ncols=(1, 2), axes_pad=0.15, share_all=True, cbar_location=&quot;right&quot;, cbar_mode=&quot;single&quot;, cbar_size=&quot;7%&quot;, cbar_pad=0.3, ) images = [dre_gasf[0], dre_gadf[0]] titles = [&#39;Summation&#39;, &#39;Difference&#39;] for image, title, ax in zip(images, titles, grid): im = ax.imshow(image, cmap=&#39;rainbow&#39;, origin=&#39;upper&#39;) ax.set_title(title, fontdict={&#39;fontsize&#39;: 12}) ax.cax.colorbar(im) ax.cax.toggle_label(True) plt.suptitle(&#39;Gramian Angular Fields&#39;, y=0.98, fontsize=16) plt.show() . /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:19: MatplotlibDeprecationWarning: Since 3.2, mpl_toolkits&#39;s own colorbar implementation is deprecated; it will be removed two minor releases later. Set the &#39;mpl_toolkits.legacy_colorbar&#39; rcParam to False to use Matplotlib&#39;s default colorbar implementation and suppress this deprecation warning. . Let&#39;s focus on the Summation image. There are around 800 heart-rate observations. Tracing the diagonal from top left to bottom right, blue at the beginning indicates lower heart-rate and more and more red towards the end of the diagonal indicates higher heart-rate. The size and transition-suddenness between blue blotches and orange/redish ones indicates the interval training pattern of this workout. . More on sideways patterns and those from difference image... later. . For now, I am energized by the results so far and eager to build our first classifier. . Our real dataset . To build the model, I am going to use a subset my personal data that I have saved over the last couple of years. Things can really get out of hand, so I want to be very specific in creating the dataset and formulating the problem. . A little over 100 samples. Each sample is a gpx file containing heart-rate timeseries data. | About half of the samples are my usual 5-mile loop I call 5SL. Each of these samples is about X timeseries datapoints. | The other half are my usual 7-mile loop I call 7OL. About Y timeseries datapoints. | A lot of these runs are probably Z4 and the remaining Z3. I need to look at the distribution, but perhaps not evenly distributed. | . Problem formulation . There are two problems that seem like good candidates to build a classifier. . use (5SL, 7OL) as classes. Given a sample, predict if it&#39;s a 5-mile loop or a 7-mile loop. | use (Z3, Z4) as classes and predict the heart-rate zone of a given sample. | Let&#39;s work on the first problem. . For now, I haven&#39;t figured out a way to represent gafs as images without having to save them to disk. I think there are some drawbacks to this, but I&#39;ll worry about them later. . from pathlib import Path gpx_root = Path(nb_root, &#39;gpxfiles&#39;) png_root = Path(nb_root, &#39;pngfiles&#39;) . def save_png(parent_dir, gaf_img, cmap, method, filename): plt.figure(figsize=(8, 8)) plt.imshow(gaf_img, cmap=cmap, origin=&#39;upper&#39;) plt.axis(&#39;off&#39;) plt.savefig(Path(parent_dir, &#39;{0}-{1}&#39;.format(filename, method)), transparent=True, bbox_inches=&#39;tight&#39;, pad_incues=0, ) plt.close() def save_gafs(method, input_path, output_path, show=False): file_list = [f for f in os.listdir(input_path) if f.endswith(&#39;.gpx&#39;)] for f in file_list: fp = Path(input_path, f) filename = fp.stem hr_data = get_hr_data(fp) gaf = load_gaf(hr_data, method, sample_range=(-1,1)) save_png(output_path, gaf[0], &quot;rainbow&quot;, method, filename) print(&#39;Saved {}&#39;.format(filename)) . save_gafs(&#39;summation&#39;, gpx_root, png_root) . def is_SL(x): return x.find(&#39;5SL&#39;) &gt; -1 dls = ImageDataLoaders.from_name_func(png_root, get_image_files(png_root), valid_pct=0.2, seed=42, label_func=is_SL, bs=16, item_tfms=Resize(460), batch_tfms=aug_transforms(size=224, min_scale=0.75)) . dls.show_batch() . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(20) . epoch train_loss valid_loss error_rate time . 0 | 1.048801 | 1.055840 | 0.523810 | 00:25 | . epoch train_loss valid_loss error_rate time . 0 | 1.109678 | 0.724945 | 0.428571 | 00:32 | . 1 | 1.172708 | 0.820616 | 0.428571 | 00:32 | . 2 | 0.984909 | 0.813838 | 0.428571 | 00:32 | . 3 | 0.973356 | 0.865735 | 0.476190 | 00:32 | . 4 | 0.935136 | 0.732521 | 0.333333 | 00:32 | . 5 | 0.936068 | 0.838644 | 0.333333 | 00:32 | . 6 | 0.883206 | 1.092174 | 0.380952 | 00:32 | . 7 | 0.882372 | 1.017813 | 0.285714 | 00:32 | . 8 | 0.841912 | 1.080862 | 0.285714 | 00:32 | . 9 | 0.758929 | 1.046241 | 0.380952 | 00:32 | . 10 | 0.721596 | 1.135306 | 0.428571 | 00:32 | . 11 | 0.696791 | 1.064326 | 0.380952 | 00:32 | . 12 | 0.694444 | 0.912005 | 0.380952 | 00:32 | . 13 | 0.635498 | 0.873604 | 0.428571 | 00:32 | . 14 | 0.613136 | 0.885692 | 0.333333 | 00:32 | . 15 | 0.571358 | 0.933391 | 0.285714 | 00:32 | . 16 | 0.557101 | 0.913112 | 0.285714 | 00:32 | . 17 | 0.507284 | 0.940340 | 0.333333 | 00:32 | . 18 | 0.488368 | 0.958029 | 0.333333 | 00:32 | . 19 | 0.461894 | 0.940470 | 0.380952 | 00:32 | . learn.fine_tune(6) . epoch train_loss valid_loss error_rate time . 0 | 1.101292 | 0.689669 | 0.476190 | 00:26 | . epoch train_loss valid_loss error_rate time . 0 | 0.976533 | 0.819983 | 0.523810 | 00:31 | . 1 | 0.892360 | 0.836412 | 0.523810 | 00:31 | . 2 | 0.994644 | 1.476326 | 0.523810 | 00:31 | . 3 | 0.941313 | 1.702338 | 0.571429 | 00:31 | . 4 | 0.839595 | 1.623793 | 0.476190 | 00:31 | . 5 | 0.848237 | 1.505917 | 0.380952 | 00:31 | . learn.fit . epoch train_loss valid_loss error_rate time . 0 | 0.686607 | 1.222500 | 0.380952 | 00:37 | . epoch train_loss valid_loss error_rate time . 0 | 0.854673 | 1.076823 | 0.428571 | 00:43 | . 1 | 0.821141 | 0.705577 | 0.285714 | 00:43 | . 2 | 0.858229 | 1.663467 | 0.619048 | 00:43 | . 3 | 0.885640 | 1.134896 | 0.476190 | 00:43 | . 4 | 0.818559 | 0.825609 | 0.428571 | 00:43 | . 5 | 0.794535 | 1.009630 | 0.380952 | 00:43 | . learn.predict(PILImage.create(&#39;/content/gdrive/MyDrive/Colab Notebooks/npyfiles/valid/5SL/5SL_08252020-summation.png&#39;)) . (&#39;True&#39;, tensor(1), tensor([0.0036, 0.9964])) . gasf = GramianAngularField(image_size=24, method=&#39;summation&#39;) hr_data_gasf = gasf.fit_transform(hr_data) gadf = GramianAngularField(image_size=24, method=&#39;difference&#39;) hr_data_gadf = gadf.fit_transform(hr_data) # Show the images for the first time series fig = plt.figure(figsize=(8, 4)) grid = ImageGrid(fig, 111, nrows_ncols=(1, 2), axes_pad=0.15, share_all=True, cbar_location=&quot;right&quot;, cbar_mode=&quot;single&quot;, cbar_size=&quot;7%&quot;, cbar_pad=0.3, ) images = [hr_data_gasf[0], hr_data_gadf[0]] titles = [&#39;Summation&#39;, &#39;Difference&#39;] for image, title, ax in zip(images, titles, grid): im = ax.imshow(image, cmap=&#39;rainbow&#39;, origin=&#39;lower&#39;) ax.set_title(title, fontdict={&#39;fontsize&#39;: 12}) ax.cax.colorbar(im) ax.cax.toggle_label(True) plt.suptitle(&#39;Gramian Angular Fields&#39;, y=0.98, fontsize=16) plt.show() . /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:23: MatplotlibDeprecationWarning: Since 3.2, mpl_toolkits&#39;s own colorbar implementation is deprecated; it will be removed two minor releases later. Set the &#39;mpl_toolkits.legacy_colorbar&#39; rcParam to False to use Matplotlib&#39;s default colorbar implementation and suppress this deprecation warning. . # two classification problems I can think of. Need to examine the dataset to see if both make sense. # First: two possible labels - 7OL, 5SL. This is a simple problem and we should have enough data. Not a very interesting problem but great to focus on setting up the whole pipeline and not worry about solving a richer problem for now. # Second: label each datapoint by heart-rate zone. # Let&#39;s look at the distribution of data before chosing one of the above two possibilities as the first problem to solve. # There are 53 OL runs and coincidentally, 53 SL runs :) A total of 106 datapoints. We can do 80/20 split. So that will be 42 training images in each category. Should be plenty to go ahead with the first category/problem formulation. . 42.400000000000006 . References . https://medium.com/analytics-vidhya/encoding-time-series-as-images-b043becbdbf3 . pyts website. . polar coordinates refresher: https://www.khanacademy.org/math/multivariable-calculus/integrating-multivariable-functions/double-integrals-a/v/polar-coordinates-1 .",
            "url": "https://schakrava.github.io/runwithheart/2021/02/01/plot-gaf.html",
            "relUrl": "/2021/02/01/plot-gaf.html",
            "date": " • Feb 1, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://schakrava.github.io/runwithheart/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://schakrava.github.io/runwithheart/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://schakrava.github.io/runwithheart/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://schakrava.github.io/runwithheart/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}